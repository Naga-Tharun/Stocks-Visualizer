// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using Stocks_Visualizer.Server.Data;

#nullable disable

namespace Stocks_Visualizer.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stocks_Visualizer.Server.Models.Domain.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("OutputSize")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Stocks_Visualizer.Server.Models.Domain.TimeSeriesData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<float>("Close")
                        .HasColumnType("BINARY_FLOAT");

                    b.Property<float>("High")
                        .HasColumnType("BINARY_FLOAT");

                    b.Property<float>("Low")
                        .HasColumnType("BINARY_FLOAT");

                    b.Property<float>("Open")
                        .HasColumnType("BINARY_FLOAT");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("Volume")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("TimeSeriesDatas");
                });

            modelBuilder.Entity("Stocks_Visualizer.Server.Models.Domain.TimeSeriesData", b =>
                {
                    b.HasOne("Stocks_Visualizer.Server.Models.Domain.Stock", null)
                        .WithMany("TimeSeries")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("Stocks_Visualizer.Server.Models.Domain.Stock", b =>
                {
                    b.Navigation("TimeSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
